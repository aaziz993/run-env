# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Code format check, quality check and publish

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches:
      - main

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  docker:
    name: 🐳 Code format check, quality check and publish
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 📥 Setup Java
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: 17

      - name: 👀 Read gradle.properties
        uses: BrycensRanch/read-properties-action@v1.0.3
        id: gradle-properties
        with:
          file: gradle.properties
          all: true

      - name: gradle.properties are':'
        env:
          GRADLE_PROPERTIES: ${{ toJson(steps.gradle-properties.outputs) }}
        run: echo "$GRADLE_PROPERTIES"

      - name: 🧪 Create image tag
        id: image-tag
        run: |
          image_version="${{ steps.gradle-properties.outputs['image.version'] }}"

          image_version_snapshot_suffix="${{ steps.gradle-properties.outputs['image.version.snapshot.suffix'] }}"

          image_version_suffix="$(
            [ "${{ steps.gradle-properties.outputs['github.actions.versioning.run.number'] }}" == "true" ] &&
            echo ".${{ github.run_number }}"
            echo
          )"

          image_tag="$(
            [ "$image_version" == *"$image_version_snapshot_suffix" ] &&
            echo "$image_version$image_version_suffix$image_version_snapshot_suffix" ||
            echo "$image_version$image_version_suffix"
          )"

          echo "image.tag=$image_tag" >> "$GITHUB_OUTPUT"

      #      - name: 🔬 Spotless code format check
      #        run: make format-check
      #
      #      - name: 🔬 Sonar continuous inspection of code quality and security
      #        env:
      #          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #        run: make quality-check

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
#      - name: 📥 Set up QEMU
#        uses: docker/setup-qemu-action@v3.0.0
#
#      - name: 🐳 Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3.3.0
#
#      - name: ⚡️ Cache Docker layers
#        uses: actions/cache@v4.0.2
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-

      - name: 🔑 Login to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: 🫗 Extract tags and labels
        uses: docker/metadata-action@v5.5.1
        id: meta
        with:
          images: "${{ env.REGISTRY }}/${{ steps.gradle-properties.outputs['image.name'] }}"

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: 🐳 Publish to Github Packages
        uses: docker/build-push-action@v5.3.0
        with:
          context: .
#          builder: ${{ steps.buildx.outputs.name }}
          build-args: |
            BASE_IMAGE=${{ steps.gradle-properties.outputs['image.base.image'] }}
            DEVELOPER_NAME=${{ steps.gradle-properties.outputs['developer.name'] }}
            DEVELOPER_EMAIL=${{ steps.gradle-properties.outputs['developer.email'] }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.vendor=${{ steps.gradle-properties.outputs['developer.name'] }}
#          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
#          cache-from: type=local,src=/tmp/.buildx-cache

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

