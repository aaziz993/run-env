# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Code format check, quality check and publish

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches:
      - main

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  BASE_IMAGE: ubuntu:jammy
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: 1.0.0.${{ github.run_number }}
# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  publish:
    name: Code format check, quality check and publish
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Spotless code format check
        run: make format-check

      - name: Sonar continuous inspection of code quality and security
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: make quality-check

      # Uses the `docker/login-action` action to log in to the Container registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - uses: docker/metadata-action@v5.5.1
        id: meta
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Publish to Github Packages
        uses: docker/build-push-action@v5.5.1
        with:
          context: .
          build-args: |
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}, ${{ env.IMAGE_TAG }}, latest
          labels: ${{ steps.meta.outputs.labels }}, ${{ github.actor }}

